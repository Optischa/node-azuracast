/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * AzuraCast
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 * OpenAPI spec version: 0.20.1
 */
import type {
  ApiAdminRelay,
  ApiAdminStorageLocation,
  ApiDetailedSongHistory,
  ApiListener,
  ApiNowPlaying,
  ApiNowPlayingStation,
  ApiPodcast,
  ApiPodcastEpisode,
  ApiStationMedia,
  ApiStationQueueDetailed,
  ApiStationRemote,
  ApiStationRequest,
  ApiStationSchedule,
  ApiStationServiceStatus,
  ApiStatus,
  ApiSystemStatus,
  ApiTime,
  ApiUploadFile,
  CustomField,
  GetScheduleParams,
  GetStationHistoryParams,
  Role,
  Settings,
  SftpUser,
  Station,
  StationMount,
  StationPlaylist,
  StationStreamer,
  StationWebhook,
  SuccessResponse,
  User
} from './schemas'
import { customFetch } from './fetch-instance';

/**
 * List all current custom fields in the system.
 */
export type getCustomFieldsResponse = {
  data: CustomField[];
  status: number;
}

export const getGetCustomFieldsUrl = () => {


  return `https://stream.breathfm.de/api/admin/custom_fields`
}

export const getCustomFields = async ( options?: RequestInit): Promise<getCustomFieldsResponse> => {
  
  return customFetch<Promise<getCustomFieldsResponse>>(getGetCustomFieldsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new custom field.
 */
export type addCustomFieldResponse = {
  data: CustomField;
  status: number;
}

export const getAddCustomFieldUrl = () => {


  return `https://stream.breathfm.de/api/admin/custom_fields`
}

export const addCustomField = async (customField: CustomField, options?: RequestInit): Promise<addCustomFieldResponse> => {
  
  return customFetch<Promise<addCustomFieldResponse>>(getAddCustomFieldUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      customField,)
  }
);}



/**
 * Retrieve details for a single custom field.
 */
export type getCustomFieldResponse = {
  data: CustomField;
  status: number;
}

export const getGetCustomFieldUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/custom_field/${id}`
}

export const getCustomField = async (id: number, options?: RequestInit): Promise<getCustomFieldResponse> => {
  
  return customFetch<Promise<getCustomFieldResponse>>(getGetCustomFieldUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single custom field.
 */
export type editCustomFieldResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditCustomFieldUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/custom_field/${id}`
}

export const editCustomField = async (id: number,
    customField: CustomField, options?: RequestInit): Promise<editCustomFieldResponse> => {
  
  return customFetch<Promise<editCustomFieldResponse>>(getEditCustomFieldUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      customField,)
  }
);}



/**
 * Delete a single custom field.
 */
export type deleteCustomFieldResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteCustomFieldUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/custom_field/${id}`
}

export const deleteCustomField = async (id: number, options?: RequestInit): Promise<deleteCustomFieldResponse> => {
  
  return customFetch<Promise<deleteCustomFieldResponse>>(getDeleteCustomFieldUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Return a list of all available permissions.
 */
export type getPermissionsResponse = {
  data: void;
  status: number;
}

export const getGetPermissionsUrl = () => {


  return `https://stream.breathfm.de/api/admin/permissions`
}

export const getPermissions = async ( options?: RequestInit): Promise<getPermissionsResponse> => {
  
  return customFetch<Promise<getPermissionsResponse>>(getGetPermissionsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * List all current roles in the system.
 */
export type getRolesResponse = {
  data: Role[];
  status: number;
}

export const getGetRolesUrl = () => {


  return `https://stream.breathfm.de/api/admin/roles`
}

export const getRoles = async ( options?: RequestInit): Promise<getRolesResponse> => {
  
  return customFetch<Promise<getRolesResponse>>(getGetRolesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new role.
 */
export type addRoleResponse = {
  data: Role;
  status: number;
}

export const getAddRoleUrl = () => {


  return `https://stream.breathfm.de/api/admin/roles`
}

export const addRole = async (role: Role, options?: RequestInit): Promise<addRoleResponse> => {
  
  return customFetch<Promise<addRoleResponse>>(getAddRoleUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      role,)
  }
);}



/**
 * Retrieve details for a single current role.
 */
export type getRoleResponse = {
  data: Role;
  status: number;
}

export const getGetRoleUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/role/${id}`
}

export const getRole = async (id: number, options?: RequestInit): Promise<getRoleResponse> => {
  
  return customFetch<Promise<getRoleResponse>>(getGetRoleUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single role.
 */
export type editRoleResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditRoleUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/role/${id}`
}

export const editRole = async (id: number,
    role: Role, options?: RequestInit): Promise<editRoleResponse> => {
  
  return customFetch<Promise<editRoleResponse>>(getEditRoleUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      role,)
  }
);}



/**
 * Delete a single role.
 */
export type deleteRoleResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteRoleUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/role/${id}`
}

export const deleteRole = async (id: number, options?: RequestInit): Promise<deleteRoleResponse> => {
  
  return customFetch<Promise<deleteRoleResponse>>(getDeleteRoleUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Return a list of all CPU usage stats.
 */
export type getServerStatsResponse = {
  data: void;
  status: number;
}

export const getGetServerStatsUrl = () => {


  return `https://stream.breathfm.de/api/admin/server/stats`
}

export const getServerStats = async ( options?: RequestInit): Promise<getServerStatsResponse> => {
  
  return customFetch<Promise<getServerStatsResponse>>(getGetServerStatsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * List the current values of all editable system settings.
 */
export type getSettingsResponse = {
  data: Settings;
  status: number;
}

export const getGetSettingsUrl = () => {


  return `https://stream.breathfm.de/api/admin/settings`
}

export const getSettings = async ( options?: RequestInit): Promise<getSettingsResponse> => {
  
  return customFetch<Promise<getSettingsResponse>>(getGetSettingsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update settings to modify any settings provided.
 */
export type editSettingsResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditSettingsUrl = () => {


  return `https://stream.breathfm.de/api/admin/settings`
}

export const editSettings = async (settings: Settings, options?: RequestInit): Promise<editSettingsResponse> => {
  
  return customFetch<Promise<editSettingsResponse>>(getEditSettingsUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      settings,)
  }
);}



/**
 * List all current stations in the system.
 */
export type adminGetStationsResponse = {
  data: Station[];
  status: number;
}

export const getAdminGetStationsUrl = () => {


  return `https://stream.breathfm.de/api/admin/stations`
}

export const adminGetStations = async ( options?: RequestInit): Promise<adminGetStationsResponse> => {
  
  return customFetch<Promise<adminGetStationsResponse>>(getAdminGetStationsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new station.
 */
export type adminAddStationResponse = {
  data: Station;
  status: number;
}

export const getAdminAddStationUrl = () => {


  return `https://stream.breathfm.de/api/admin/stations`
}

export const adminAddStation = async (station: Station, options?: RequestInit): Promise<adminAddStationResponse> => {
  
  return customFetch<Promise<adminAddStationResponse>>(getAdminAddStationUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      station,)
  }
);}



/**
 * Retrieve details for a single station.
 */
export type adminGetStationResponse = {
  data: Station;
  status: number;
}

export const getAdminGetStationUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/station/${id}`
}

export const adminGetStation = async (id: number, options?: RequestInit): Promise<adminGetStationResponse> => {
  
  return customFetch<Promise<adminGetStationResponse>>(getAdminGetStationUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single station.
 */
export type adminEditStationResponse = {
  data: SuccessResponse;
  status: number;
}

export const getAdminEditStationUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/station/${id}`
}

export const adminEditStation = async (id: number,
    station: Station, options?: RequestInit): Promise<adminEditStationResponse> => {
  
  return customFetch<Promise<adminEditStationResponse>>(getAdminEditStationUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      station,)
  }
);}



/**
 * Delete a single station.
 */
export type adminDeleteStationResponse = {
  data: SuccessResponse;
  status: number;
}

export const getAdminDeleteStationUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/station/${id}`
}

export const adminDeleteStation = async (id: number, options?: RequestInit): Promise<adminDeleteStationResponse> => {
  
  return customFetch<Promise<adminDeleteStationResponse>>(getAdminDeleteStationUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current storage locations in the system.
 */
export type getStorageLocationsResponse = {
  data: ApiAdminStorageLocation[];
  status: number;
}

export const getGetStorageLocationsUrl = () => {


  return `https://stream.breathfm.de/api/admin/storage_locations`
}

export const getStorageLocations = async ( options?: RequestInit): Promise<getStorageLocationsResponse> => {
  
  return customFetch<Promise<getStorageLocationsResponse>>(getGetStorageLocationsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new storage location.
 */
export type addStorageLocationResponse = {
  data: ApiAdminStorageLocation;
  status: number;
}

export const getAddStorageLocationUrl = () => {


  return `https://stream.breathfm.de/api/admin/storage_locations`
}

export const addStorageLocation = async (apiAdminStorageLocation: ApiAdminStorageLocation, options?: RequestInit): Promise<addStorageLocationResponse> => {
  
  return customFetch<Promise<addStorageLocationResponse>>(getAddStorageLocationUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiAdminStorageLocation,)
  }
);}



/**
 * Retrieve details for a single storage location.
 */
export type getStorageLocationResponse = {
  data: ApiAdminStorageLocation;
  status: number;
}

export const getGetStorageLocationUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/storage_location/${id}`
}

export const getStorageLocation = async (id: number, options?: RequestInit): Promise<getStorageLocationResponse> => {
  
  return customFetch<Promise<getStorageLocationResponse>>(getGetStorageLocationUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single storage location.
 */
export type editStorageLocationResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditStorageLocationUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/storage_location/${id}`
}

export const editStorageLocation = async (id: number,
    apiAdminStorageLocation: ApiAdminStorageLocation, options?: RequestInit): Promise<editStorageLocationResponse> => {
  
  return customFetch<Promise<editStorageLocationResponse>>(getEditStorageLocationUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiAdminStorageLocation,)
  }
);}



/**
 * Delete a single storage location.
 */
export type deleteStorageLocationResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteStorageLocationUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/storage_location/${id}`
}

export const deleteStorageLocation = async (id: number, options?: RequestInit): Promise<deleteStorageLocationResponse> => {
  
  return customFetch<Promise<deleteStorageLocationResponse>>(getDeleteStorageLocationUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current users in the system.
 */
export type getUsersResponse = {
  data: User[];
  status: number;
}

export const getGetUsersUrl = () => {


  return `https://stream.breathfm.de/api/admin/users`
}

export const getUsers = async ( options?: RequestInit): Promise<getUsersResponse> => {
  
  return customFetch<Promise<getUsersResponse>>(getGetUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new user.
 */
export type addUserResponse = {
  data: User;
  status: number;
}

export const getAddUserUrl = () => {


  return `https://stream.breathfm.de/api/admin/users`
}

export const addUser = async (user: User, options?: RequestInit): Promise<addUserResponse> => {
  
  return customFetch<Promise<addUserResponse>>(getAddUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      user,)
  }
);}



/**
 * Retrieve details for a single current user.
 */
export type getUserResponse = {
  data: User;
  status: number;
}

export const getGetUserUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/user/${id}`
}

export const getUser = async (id: number, options?: RequestInit): Promise<getUserResponse> => {
  
  return customFetch<Promise<getUserResponse>>(getGetUserUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single user.
 */
export type editUserResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditUserUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/user/${id}`
}

export const editUser = async (id: number,
    user: User, options?: RequestInit): Promise<editUserResponse> => {
  
  return customFetch<Promise<editUserResponse>>(getEditUserUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      user,)
  }
);}



/**
 * Delete a single user.
 */
export type deleteUserResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteUserUrl = (id: number,) => {


  return `https://stream.breathfm.de/api/admin/user/${id}`
}

export const deleteUser = async (id: number, options?: RequestInit): Promise<deleteUserResponse> => {
  
  return customFetch<Promise<deleteUserResponse>>(getDeleteUserUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Returns an affirmative response if the API is active.
 */
export type getStatusResponse = {
  data: ApiSystemStatus;
  status: number;
}

export const getGetStatusUrl = () => {


  return `https://stream.breathfm.de/api/status`
}

export const getStatus = async ( options?: RequestInit): Promise<getStatusResponse> => {
  
  return customFetch<Promise<getStatusResponse>>(getGetStatusUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Returns the time (with formatting) in GMT and the user's local time zone, if logged in.
 */
export type getTimeResponse = {
  data: ApiTime;
  status: number;
}

export const getGetTimeUrl = () => {


  return `https://stream.breathfm.de/api/time`
}

export const getTime = async ( options?: RequestInit): Promise<getTimeResponse> => {
  
  return customFetch<Promise<getTimeResponse>>(getGetTimeUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Returns all necessary information to relay all 'relayable' stations.
 */
export type internalGetRelayDetailsResponse = {
  data: ApiAdminRelay[];
  status: number;
}

export const getInternalGetRelayDetailsUrl = () => {


  return `https://stream.breathfm.de/api/internal/relays`
}

export const internalGetRelayDetails = async ( options?: RequestInit): Promise<internalGetRelayDetailsResponse> => {
  
  return customFetch<Promise<internalGetRelayDetailsResponse>>(getInternalGetRelayDetailsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Returns a full summary of all stations' current state.
 */
export type getAllNowPlayingResponse = {
  data: ApiNowPlaying[];
  status: number;
}

export const getGetAllNowPlayingUrl = () => {


  return `https://stream.breathfm.de/api/nowplaying`
}

export const getAllNowPlaying = async ( options?: RequestInit): Promise<getAllNowPlayingResponse> => {
  
  return customFetch<Promise<getAllNowPlayingResponse>>(getGetAllNowPlayingUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Returns a full summary of the specified station's current state.
 */
export type getStationNowPlayingResponse = {
  data: ApiNowPlaying;
  status: number;
}

export const getGetStationNowPlayingUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/nowplaying/${stationId}`
}

export const getStationNowPlaying = async (stationId: number | string, options?: RequestInit): Promise<getStationNowPlayingResponse> => {
  
  return customFetch<Promise<getStationNowPlayingResponse>>(getGetStationNowPlayingUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Returns the album art for a song, or a generic image.
 */
export type getMediaArtResponse = {
  data: void;
  status: number;
}

export const getGetMediaArtUrl = (stationId: number | string,
    mediaId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/art/${mediaId}`
}

export const getMediaArt = async (stationId: number | string,
    mediaId: string, options?: RequestInit): Promise<getMediaArtResponse> => {
  
  return customFetch<Promise<getMediaArtResponse>>(getGetMediaArtUrl(stationId,mediaId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Sets the album art for a track.
 */
export type postMediaArtResponse = {
  data: SuccessResponse;
  status: number;
}

export const getPostMediaArtUrl = (stationId: number | string,
    mediaId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/art/${mediaId}`
}

export const postMediaArt = async (stationId: number | string,
    mediaId: number | string, options?: RequestInit): Promise<postMediaArtResponse> => {
  
  return customFetch<Promise<postMediaArtResponse>>(getPostMediaArtUrl(stationId,mediaId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Removes the album art for a track.
 */
export type deleteMediaArtResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteMediaArtUrl = (stationId: number | string,
    mediaId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/art/${mediaId}`
}

export const deleteMediaArt = async (stationId: number | string,
    mediaId: number | string, options?: RequestInit): Promise<deleteMediaArtResponse> => {
  
  return customFetch<Promise<deleteMediaArtResponse>>(getDeleteMediaArtUrl(stationId,mediaId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Get the custom fallback track for a station.
 */
export type getStationFallbackResponse = {
  data: void;
  status: number;
}

export const getGetStationFallbackUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/fallback`
}

export const getStationFallback = async (stationId: number | string, options?: RequestInit): Promise<getStationFallbackResponse> => {
  
  return customFetch<Promise<getStationFallbackResponse>>(getGetStationFallbackUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update the custom fallback track for the station.
 */
export type postStationFallbackResponse = {
  data: SuccessResponse;
  status: number;
}

export const getPostStationFallbackUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/fallback`
}

export const postStationFallback = async (stationId: number | string, options?: RequestInit): Promise<postStationFallbackResponse> => {
  
  return customFetch<Promise<postStationFallbackResponse>>(getPostStationFallbackUrl(stationId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Removes the custom fallback track for a station.
 */
export type deleteStationFallbackResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteStationFallbackUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/fallback`
}

export const deleteStationFallback = async (stationId: number | string, options?: RequestInit): Promise<deleteStationFallbackResponse> => {
  
  return customFetch<Promise<deleteStationFallbackResponse>>(getDeleteStationFallbackUrl(stationId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current uploaded files.
 */
export type getFilesResponse = {
  data: ApiStationMedia[];
  status: number;
}

export const getGetFilesUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/files`
}

export const getFiles = async (stationId: number | string, options?: RequestInit): Promise<getFilesResponse> => {
  
  return customFetch<Promise<getFilesResponse>>(getGetFilesUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Upload a new file.
 */
export type addFileResponse = {
  data: ApiStationMedia;
  status: number;
}

export const getAddFileUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/files`
}

export const addFile = async (stationId: number | string,
    apiUploadFile: ApiUploadFile, options?: RequestInit): Promise<addFileResponse> => {
  
  return customFetch<Promise<addFileResponse>>(getAddFileUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiUploadFile,)
  }
);}



/**
 * Retrieve details for a single file.
 */
export type getFileResponse = {
  data: ApiStationMedia;
  status: number;
}

export const getGetFileUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/file/${id}`
}

export const getFile = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getFileResponse> => {
  
  return customFetch<Promise<getFileResponse>>(getGetFileUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single file.
 */
export type editFileResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditFileUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/file/${id}`
}

export const editFile = async (stationId: number | string,
    id: number,
    apiStationMedia: ApiStationMedia, options?: RequestInit): Promise<editFileResponse> => {
  
  return customFetch<Promise<editFileResponse>>(getEditFileUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiStationMedia,)
  }
);}



/**
 * Delete a single file.
 */
export type deleteFileResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteFileUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/file/${id}`
}

export const deleteFile = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteFileResponse> => {
  
  return customFetch<Promise<deleteFileResponse>>(getDeleteFileUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Return song playback history items for a given station.
 */
export type getStationHistoryResponse = {
  data: ApiDetailedSongHistory[];
  status: number;
}

export const getGetStationHistoryUrl = (stationId: number | string,
    params?: GetStationHistoryParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `https://stream.breathfm.de/api/station/${stationId}/history?${normalizedParams.toString()}` : `https://stream.breathfm.de/api/station/${stationId}/history`
}

export const getStationHistory = async (stationId: number | string,
    params?: GetStationHistoryParams, options?: RequestInit): Promise<getStationHistoryResponse> => {
  
  return customFetch<Promise<getStationHistoryResponse>>(getGetStationHistoryUrl(stationId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * List all current HLS streams.
 */
export type getHlsStreamsResponse = {
  data: StationMount[];
  status: number;
}

export const getGetHlsStreamsUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/hls_streams`
}

export const getHlsStreams = async (stationId: number | string, options?: RequestInit): Promise<getHlsStreamsResponse> => {
  
  return customFetch<Promise<getHlsStreamsResponse>>(getGetHlsStreamsUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new HLS stream.
 */
export type addHlsStreamResponse = {
  data: StationMount;
  status: number;
}

export const getAddHlsStreamUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/hls_streams`
}

export const addHlsStream = async (stationId: number | string,
    stationMount: StationMount, options?: RequestInit): Promise<addHlsStreamResponse> => {
  
  return customFetch<Promise<addHlsStreamResponse>>(getAddHlsStreamUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationMount,)
  }
);}



/**
 * Retrieve details for a single HLS stream.
 */
export type getHlsStreamResponse = {
  data: StationMount;
  status: number;
}

export const getGetHlsStreamUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/hls_stream/${id}`
}

export const getHlsStream = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getHlsStreamResponse> => {
  
  return customFetch<Promise<getHlsStreamResponse>>(getGetHlsStreamUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single HLS stream.
 */
export type editHlsStreamResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditHlsStreamUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/hls_stream/${id}`
}

export const editHlsStream = async (stationId: number | string,
    id: number,
    stationMount: StationMount, options?: RequestInit): Promise<editHlsStreamResponse> => {
  
  return customFetch<Promise<editHlsStreamResponse>>(getEditHlsStreamUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationMount,)
  }
);}



/**
 * Delete a single HLS stream.
 */
export type deleteHlsStreamResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteHlsStreamUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/hls_stream/${id}`
}

export const deleteHlsStream = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteHlsStreamResponse> => {
  
  return customFetch<Promise<deleteHlsStreamResponse>>(getDeleteHlsStreamUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Returns a list of stations.
 */
export type getStationsResponse = {
  data: ApiNowPlayingStation[];
  status: number;
}

export const getGetStationsUrl = () => {


  return `https://stream.breathfm.de/api/stations`
}

export const getStations = async ( options?: RequestInit): Promise<getStationsResponse> => {
  
  return customFetch<Promise<getStationsResponse>>(getGetStationsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Return information about a single station.
 */
export type getStationResponse = {
  data: ApiNowPlayingStation;
  status: number;
}

export const getGetStationUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}`
}

export const getStation = async (stationId: number | string, options?: RequestInit): Promise<getStationResponse> => {
  
  return customFetch<Promise<getStationResponse>>(getGetStationUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Return detailed information about current listeners.
 */
export type getStationListenersResponse = {
  data: ApiListener[];
  status: number;
}

export const getGetStationListenersUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/listeners`
}

export const getStationListeners = async (stationId: number | string, options?: RequestInit): Promise<getStationListenersResponse> => {
  
  return customFetch<Promise<getStationListenersResponse>>(getGetStationListenersUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Get the intro track for a mount point.
 */
export type getMountIntroResponse = {
  data: void;
  status: number;
}

export const getGetMountIntroUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mount/${id}/intro`
}

export const getMountIntro = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getMountIntroResponse> => {
  
  return customFetch<Promise<getMountIntroResponse>>(getGetMountIntroUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update the intro track for a mount point.
 */
export type postMountIntroResponse = {
  data: SuccessResponse;
  status: number;
}

export const getPostMountIntroUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mount/${id}/intro`
}

export const postMountIntro = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<postMountIntroResponse> => {
  
  return customFetch<Promise<postMountIntroResponse>>(getPostMountIntroUrl(stationId,id),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Removes the intro track for a mount point.
 */
export type deleteMountIntroResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteMountIntroUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mount/${id}/intro`
}

export const deleteMountIntro = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteMountIntroResponse> => {
  
  return customFetch<Promise<deleteMountIntroResponse>>(getDeleteMountIntroUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current mount points.
 */
export type getStationMountsResponse = {
  data: StationMount[];
  status: number;
}

export const getGetStationMountsUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mounts`
}

export const getStationMounts = async (stationId: number | string, options?: RequestInit): Promise<getStationMountsResponse> => {
  
  return customFetch<Promise<getStationMountsResponse>>(getGetStationMountsUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new mount point.
 */
export type addMountResponse = {
  data: StationMount;
  status: number;
}

export const getAddMountUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mounts`
}

export const addMount = async (stationId: number | string,
    stationMount: StationMount, options?: RequestInit): Promise<addMountResponse> => {
  
  return customFetch<Promise<addMountResponse>>(getAddMountUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationMount,)
  }
);}



/**
 * Retrieve details for a single mount point.
 */
export type getMountResponse = {
  data: StationMount;
  status: number;
}

export const getGetMountUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mount/${id}`
}

export const getMount = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getMountResponse> => {
  
  return customFetch<Promise<getMountResponse>>(getGetMountUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single mount point.
 */
export type editMountResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditMountUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mount/${id}`
}

export const editMount = async (stationId: number | string,
    id: number,
    stationMount: StationMount, options?: RequestInit): Promise<editMountResponse> => {
  
  return customFetch<Promise<editMountResponse>>(getEditMountUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationMount,)
  }
);}



/**
 * Delete a single mount point.
 */
export type deleteMountResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteMountUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/mount/${id}`
}

export const deleteMount = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteMountResponse> => {
  
  return customFetch<Promise<deleteMountResponse>>(getDeleteMountUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current playlists.
 */
export type getPlaylistsResponse = {
  data: StationPlaylist[];
  status: number;
}

export const getGetPlaylistsUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/playlists`
}

export const getPlaylists = async (stationId: number | string, options?: RequestInit): Promise<getPlaylistsResponse> => {
  
  return customFetch<Promise<getPlaylistsResponse>>(getGetPlaylistsUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new playlist.
 */
export type addPlaylistResponse = {
  data: StationPlaylist;
  status: number;
}

export const getAddPlaylistUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/playlists`
}

export const addPlaylist = async (stationId: number | string,
    stationPlaylist: StationPlaylist, options?: RequestInit): Promise<addPlaylistResponse> => {
  
  return customFetch<Promise<addPlaylistResponse>>(getAddPlaylistUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationPlaylist,)
  }
);}



/**
 * Retrieve details for a single playlist.
 */
export type getPlaylistResponse = {
  data: StationPlaylist;
  status: number;
}

export const getGetPlaylistUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/playlist/${id}`
}

export const getPlaylist = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getPlaylistResponse> => {
  
  return customFetch<Promise<getPlaylistResponse>>(getGetPlaylistUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single playlist.
 */
export type editPlaylistResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditPlaylistUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/playlist/${id}`
}

export const editPlaylist = async (stationId: number | string,
    id: number,
    stationPlaylist: StationPlaylist, options?: RequestInit): Promise<editPlaylistResponse> => {
  
  return customFetch<Promise<editPlaylistResponse>>(getEditPlaylistUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationPlaylist,)
  }
);}



/**
 * Delete a single playlist relay.
 */
export type deletePlaylistResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeletePlaylistUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/playlist/${id}`
}

export const deletePlaylist = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deletePlaylistResponse> => {
  
  return customFetch<Promise<deletePlaylistResponse>>(getDeletePlaylistUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current episodes for a given podcast ID.
 */
export type getEpisodesResponse = {
  data: ApiPodcastEpisode[];
  status: number;
}

export const getGetEpisodesUrl = (stationId: number | string,
    podcastId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episodes`
}

export const getEpisodes = async (stationId: number | string,
    podcastId: string, options?: RequestInit): Promise<getEpisodesResponse> => {
  
  return customFetch<Promise<getEpisodesResponse>>(getGetEpisodesUrl(stationId,podcastId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new podcast episode.
 */
export type addEpisodeResponse = {
  data: ApiPodcastEpisode;
  status: number;
}

export const getAddEpisodeUrl = (stationId: number | string,
    podcastId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episodes`
}

export const addEpisode = async (stationId: number | string,
    podcastId: string,
    apiPodcastEpisode: ApiPodcastEpisode, options?: RequestInit): Promise<addEpisodeResponse> => {
  
  return customFetch<Promise<addEpisodeResponse>>(getAddEpisodeUrl(stationId,podcastId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiPodcastEpisode,)
  }
);}



/**
 * Retrieve details for a single podcast episode.
 */
export type getEpisodeResponse = {
  data: ApiPodcastEpisode;
  status: number;
}

export const getGetEpisodeUrl = (stationId: number | string,
    podcastId: string,
    id: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${id}`
}

export const getEpisode = async (stationId: number | string,
    podcastId: string,
    id: string, options?: RequestInit): Promise<getEpisodeResponse> => {
  
  return customFetch<Promise<getEpisodeResponse>>(getGetEpisodeUrl(stationId,podcastId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single podcast episode.
 */
export type editEpisodeResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditEpisodeUrl = (stationId: number | string,
    podcastId: string,
    id: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${id}`
}

export const editEpisode = async (stationId: number | string,
    podcastId: string,
    id: string,
    apiPodcastEpisode: ApiPodcastEpisode, options?: RequestInit): Promise<editEpisodeResponse> => {
  
  return customFetch<Promise<editEpisodeResponse>>(getEditEpisodeUrl(stationId,podcastId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiPodcastEpisode,)
  }
);}



/**
 * Delete a single podcast episode.
 */
export type deleteEpisodeResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteEpisodeUrl = (stationId: number | string,
    podcastId: string,
    id: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${id}`
}

export const deleteEpisode = async (stationId: number | string,
    podcastId: string,
    id: string, options?: RequestInit): Promise<deleteEpisodeResponse> => {
  
  return customFetch<Promise<deleteEpisodeResponse>>(getDeleteEpisodeUrl(stationId,podcastId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Gets the album art for a podcast.
 */
export type getPodcastArtResponse = {
  data: void;
  status: number;
}

export const getGetPodcastArtUrl = (stationId: number | string,
    podcastId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/art`
}

export const getPodcastArt = async (stationId: number | string,
    podcastId: string, options?: RequestInit): Promise<getPodcastArtResponse> => {
  
  return customFetch<Promise<getPodcastArtResponse>>(getGetPodcastArtUrl(stationId,podcastId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Sets the album art for a podcast.
 */
export type postPodcastArtResponse = {
  data: SuccessResponse;
  status: number;
}

export const getPostPodcastArtUrl = (stationId: number | string,
    podcastId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/art`
}

export const postPodcastArt = async (stationId: number | string,
    podcastId: string, options?: RequestInit): Promise<postPodcastArtResponse> => {
  
  return customFetch<Promise<postPodcastArtResponse>>(getPostPodcastArtUrl(stationId,podcastId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Removes the album art for a podcast.
 */
export type deletePodcastArtResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeletePodcastArtUrl = (stationId: number | string,
    podcastId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/art`
}

export const deletePodcastArt = async (stationId: number | string,
    podcastId: string, options?: RequestInit): Promise<deletePodcastArtResponse> => {
  
  return customFetch<Promise<deletePodcastArtResponse>>(getDeletePodcastArtUrl(stationId,podcastId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Gets the album art for a podcast episode.
 */
export type getPodcastEpisodeArtResponse = {
  data: void;
  status: number;
}

export const getGetPodcastEpisodeArtUrl = (stationId: number | string,
    podcastId: string,
    episodeId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${episodeId}/art`
}

export const getPodcastEpisodeArt = async (stationId: number | string,
    podcastId: string,
    episodeId: string, options?: RequestInit): Promise<getPodcastEpisodeArtResponse> => {
  
  return customFetch<Promise<getPodcastEpisodeArtResponse>>(getGetPodcastEpisodeArtUrl(stationId,podcastId,episodeId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Sets the album art for a podcast episode.
 */
export type postPodcastEpisodeArtResponse = {
  data: SuccessResponse;
  status: number;
}

export const getPostPodcastEpisodeArtUrl = (stationId: number | string,
    podcastId: string,
    episodeId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${episodeId}/art`
}

export const postPodcastEpisodeArt = async (stationId: number | string,
    podcastId: string,
    episodeId: string, options?: RequestInit): Promise<postPodcastEpisodeArtResponse> => {
  
  return customFetch<Promise<postPodcastEpisodeArtResponse>>(getPostPodcastEpisodeArtUrl(stationId,podcastId,episodeId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Removes the album art for a podcast episode.
 */
export type deletePodcastEpisodeArtResponse = {
  data: ApiStatus;
  status: number;
}

export const getDeletePodcastEpisodeArtUrl = (stationId: number | string,
    podcastId: string,
    episodeId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${episodeId}/art`
}

export const deletePodcastEpisodeArt = async (stationId: number | string,
    podcastId: string,
    episodeId: string, options?: RequestInit): Promise<deletePodcastEpisodeArtResponse> => {
  
  return customFetch<Promise<deletePodcastEpisodeArtResponse>>(getDeletePodcastEpisodeArtUrl(stationId,podcastId,episodeId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Gets the media for a podcast episode.
 */
export type getPodcastEpisodeMediaResponse = {
  data: void;
  status: number;
}

export const getGetPodcastEpisodeMediaUrl = (stationId: number | string,
    podcastId: string,
    episodeId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${episodeId}/media`
}

export const getPodcastEpisodeMedia = async (stationId: number | string,
    podcastId: string,
    episodeId: string, options?: RequestInit): Promise<getPodcastEpisodeMediaResponse> => {
  
  return customFetch<Promise<getPodcastEpisodeMediaResponse>>(getGetPodcastEpisodeMediaUrl(stationId,podcastId,episodeId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Sets the media for a podcast episode.
 */
export type postPodcastEpisodeMediaResponse = {
  data: SuccessResponse;
  status: number;
}

export const getPostPodcastEpisodeMediaUrl = (stationId: number | string,
    podcastId: string,
    episodeId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${episodeId}/media`
}

export const postPodcastEpisodeMedia = async (stationId: number | string,
    podcastId: string,
    episodeId: string, options?: RequestInit): Promise<postPodcastEpisodeMediaResponse> => {
  
  return customFetch<Promise<postPodcastEpisodeMediaResponse>>(getPostPodcastEpisodeMediaUrl(stationId,podcastId,episodeId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Removes the media for a podcast episode.
 */
export type deletePodcastEpisodeMediaResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeletePodcastEpisodeMediaUrl = (stationId: number | string,
    podcastId: string,
    episodeId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${podcastId}/episode/${episodeId}/media`
}

export const deletePodcastEpisodeMedia = async (stationId: number | string,
    podcastId: string,
    episodeId: string, options?: RequestInit): Promise<deletePodcastEpisodeMediaResponse> => {
  
  return customFetch<Promise<deletePodcastEpisodeMediaResponse>>(getDeletePodcastEpisodeMediaUrl(stationId,podcastId,episodeId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current podcasts.
 */
export type getPodcastsResponse = {
  data: ApiPodcast[];
  status: number;
}

export const getGetPodcastsUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcasts`
}

export const getPodcasts = async (stationId: number | string, options?: RequestInit): Promise<getPodcastsResponse> => {
  
  return customFetch<Promise<getPodcastsResponse>>(getGetPodcastsUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new podcast.
 */
export type addPodcastResponse = {
  data: ApiPodcast;
  status: number;
}

export const getAddPodcastUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcasts`
}

export const addPodcast = async (stationId: number | string,
    apiPodcast: ApiPodcast, options?: RequestInit): Promise<addPodcastResponse> => {
  
  return customFetch<Promise<addPodcastResponse>>(getAddPodcastUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiPodcast,)
  }
);}



/**
 * Retrieve details for a single podcast.
 */
export type getPodcastResponse = {
  data: ApiPodcast;
  status: number;
}

export const getGetPodcastUrl = (stationId: number | string,
    id: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${id}`
}

export const getPodcast = async (stationId: number | string,
    id: string, options?: RequestInit): Promise<getPodcastResponse> => {
  
  return customFetch<Promise<getPodcastResponse>>(getGetPodcastUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single podcast.
 */
export type editPodcastResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditPodcastUrl = (stationId: number | string,
    id: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${id}`
}

export const editPodcast = async (stationId: number | string,
    id: string,
    apiPodcast: ApiPodcast, options?: RequestInit): Promise<editPodcastResponse> => {
  
  return customFetch<Promise<editPodcastResponse>>(getEditPodcastUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiPodcast,)
  }
);}



/**
 * Delete a single podcast.
 */
export type deletePodcastResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeletePodcastUrl = (stationId: number | string,
    id: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/podcast/${id}`
}

export const deletePodcast = async (stationId: number | string,
    id: string, options?: RequestInit): Promise<deletePodcastResponse> => {
  
  return customFetch<Promise<deletePodcastResponse>>(getDeletePodcastUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Return information about the upcoming song playback queue.
 */
export type getQueueResponse = {
  data: ApiStationQueueDetailed[];
  status: number;
}

export const getGetQueueUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/queue`
}

export const getQueue = async (stationId: number | string, options?: RequestInit): Promise<getQueueResponse> => {
  
  return customFetch<Promise<getQueueResponse>>(getGetQueueUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Retrieve details of a single queued item.
 */
export type getQueueItemResponse = {
  data: ApiStationQueueDetailed;
  status: number;
}

export const getGetQueueItemUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/queue/${id}`
}

export const getQueueItem = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getQueueItemResponse> => {
  
  return customFetch<Promise<getQueueItemResponse>>(getGetQueueItemUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Delete a single queued item.
 */
export type deleteQueueItemResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteQueueItemUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/queue/${id}`
}

export const deleteQueueItem = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteQueueItemResponse> => {
  
  return customFetch<Promise<deleteQueueItemResponse>>(getDeleteQueueItemUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current remote relays.
 */
export type getRelaysResponse = {
  data: ApiStationRemote[];
  status: number;
}

export const getGetRelaysUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/remotes`
}

export const getRelays = async (stationId: number | string, options?: RequestInit): Promise<getRelaysResponse> => {
  
  return customFetch<Promise<getRelaysResponse>>(getGetRelaysUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new remote relay.
 */
export type addRelayResponse = {
  data: ApiStationRemote;
  status: number;
}

export const getAddRelayUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/remotes`
}

export const addRelay = async (stationId: number | string,
    apiStationRemote: ApiStationRemote, options?: RequestInit): Promise<addRelayResponse> => {
  
  return customFetch<Promise<addRelayResponse>>(getAddRelayUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiStationRemote,)
  }
);}



/**
 * Retrieve details for a single remote relay.
 */
export type getRelayResponse = {
  data: ApiStationRemote;
  status: number;
}

export const getGetRelayUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/remote/${id}`
}

export const getRelay = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getRelayResponse> => {
  
  return customFetch<Promise<getRelayResponse>>(getGetRelayUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single remote relay.
 */
export type editRelayResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditRelayUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/remote/${id}`
}

export const editRelay = async (stationId: number | string,
    id: number,
    apiStationRemote: ApiStationRemote, options?: RequestInit): Promise<editRelayResponse> => {
  
  return customFetch<Promise<editRelayResponse>>(getEditRelayUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      apiStationRemote,)
  }
);}



/**
 * Delete a single remote relay.
 */
export type deleteRelayResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteRelayUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/remote/${id}`
}

export const deleteRelay = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteRelayResponse> => {
  
  return customFetch<Promise<deleteRelayResponse>>(getDeleteRelayUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Return a list of requestable songs.
 */
export type getRequestableSongsResponse = {
  data: ApiStationRequest[];
  status: number;
}

export const getGetRequestableSongsUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/requests`
}

export const getRequestableSongs = async (stationId: number | string, options?: RequestInit): Promise<getRequestableSongsResponse> => {
  
  return customFetch<Promise<getRequestableSongsResponse>>(getGetRequestableSongsUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Submit a song request.
 */
export type submitSongRequestResponse = {
  data: SuccessResponse;
  status: number;
}

export const getSubmitSongRequestUrl = (stationId: number | string,
    requestId: string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/request/${requestId}`
}

export const submitSongRequest = async (stationId: number | string,
    requestId: string, options?: RequestInit): Promise<submitSongRequestResponse> => {
  
  return customFetch<Promise<submitSongRequestResponse>>(getSubmitSongRequestUrl(stationId,requestId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Return upcoming and currently ongoing schedule entries.
 */
export type getScheduleResponse = {
  data: ApiStationSchedule[];
  status: number;
}

export const getGetScheduleUrl = (stationId: number | string,
    params?: GetScheduleParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `https://stream.breathfm.de/api/station/${stationId}/schedule?${normalizedParams.toString()}` : `https://stream.breathfm.de/api/station/${stationId}/schedule`
}

export const getSchedule = async (stationId: number | string,
    params?: GetScheduleParams, options?: RequestInit): Promise<getScheduleResponse> => {
  
  return customFetch<Promise<getScheduleResponse>>(getGetScheduleUrl(stationId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Retrieve the current status of all serivces associated with the radio broadcast.
 */
export type getServiceStatusResponse = {
  data: ApiStationServiceStatus;
  status: number;
}

export const getGetServiceStatusUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/status`
}

export const getServiceStatus = async (stationId: number | string, options?: RequestInit): Promise<getServiceStatusResponse> => {
  
  return customFetch<Promise<getServiceStatusResponse>>(getGetServiceStatusUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Restart all services associated with the radio broadcast.
 */
export type restartServicesResponse = {
  data: SuccessResponse;
  status: number;
}

export const getRestartServicesUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/restart`
}

export const restartServices = async (stationId: number | string, options?: RequestInit): Promise<restartServicesResponse> => {
  
  return customFetch<Promise<restartServicesResponse>>(getRestartServicesUrl(stationId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * List all current SFTP users.
 */
export type getSftpUsersResponse = {
  data: SftpUser[];
  status: number;
}

export const getGetSftpUsersUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/sftp-users`
}

export const getSftpUsers = async (stationId: number | string, options?: RequestInit): Promise<getSftpUsersResponse> => {
  
  return customFetch<Promise<getSftpUsersResponse>>(getGetSftpUsersUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new SFTP user.
 */
export type addSftpUserResponse = {
  data: SftpUser;
  status: number;
}

export const getAddSftpUserUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/sftp-users`
}

export const addSftpUser = async (stationId: number | string,
    sftpUser: SftpUser, options?: RequestInit): Promise<addSftpUserResponse> => {
  
  return customFetch<Promise<addSftpUserResponse>>(getAddSftpUserUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      sftpUser,)
  }
);}



/**
 * Retrieve details for a single SFTP user.
 */
export type getSftpUserResponse = {
  data: SftpUser;
  status: number;
}

export const getGetSftpUserUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/sftp-user/${id}`
}

export const getSftpUser = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getSftpUserResponse> => {
  
  return customFetch<Promise<getSftpUserResponse>>(getGetSftpUserUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single SFTP user.
 */
export type editSftpUserResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditSftpUserUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/sftp-user/${id}`
}

export const editSftpUser = async (stationId: number | string,
    id: number,
    sftpUser: SftpUser, options?: RequestInit): Promise<editSftpUserResponse> => {
  
  return customFetch<Promise<editSftpUserResponse>>(getEditSftpUserUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      sftpUser,)
  }
);}



/**
 * Delete a single remote relay.
 */
export type deleteSftpUserResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteSftpUserUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/sftp-user/${id}`
}

export const deleteSftpUser = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteSftpUserResponse> => {
  
  return customFetch<Promise<deleteSftpUserResponse>>(getDeleteSftpUserUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * Get the Stereo Tool configuration file for a station.
 */
export type getStereoToolConfigurationResponse = {
  data: void;
  status: number;
}

export const getGetStereoToolConfigurationUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/stereo-tool-configuration`
}

export const getStereoToolConfiguration = async (stationId: number | string, options?: RequestInit): Promise<getStereoToolConfigurationResponse> => {
  
  return customFetch<Promise<getStereoToolConfigurationResponse>>(getGetStereoToolConfigurationUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update the Stereo Tool configuration file for a station.
 */
export type postStereoToolConfigurationResponse = {
  data: SuccessResponse;
  status: number;
}

export const getPostStereoToolConfigurationUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/stereo-tool-configuration`
}

export const postStereoToolConfiguration = async (stationId: number | string, options?: RequestInit): Promise<postStereoToolConfigurationResponse> => {
  
  return customFetch<Promise<postStereoToolConfigurationResponse>>(getPostStereoToolConfigurationUrl(stationId),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * Removes the Stereo Tool configuration file for a station.
 */
export type deleteStereoToolConfigurationResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteStereoToolConfigurationUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/stereo-tool-configuration`
}

export const deleteStereoToolConfiguration = async (stationId: number | string, options?: RequestInit): Promise<deleteStereoToolConfigurationResponse> => {
  
  return customFetch<Promise<deleteStereoToolConfigurationResponse>>(getDeleteStereoToolConfigurationUrl(stationId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current Streamer/DJ accounts for the specified station.
 */
export type getStreamersResponse = {
  data: StationStreamer[];
  status: number;
}

export const getGetStreamersUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/streamers`
}

export const getStreamers = async (stationId: number | string, options?: RequestInit): Promise<getStreamersResponse> => {
  
  return customFetch<Promise<getStreamersResponse>>(getGetStreamersUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new Streamer/DJ account.
 */
export type addStreamerResponse = {
  data: StationStreamer;
  status: number;
}

export const getAddStreamerUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/streamers`
}

export const addStreamer = async (stationId: number | string,
    stationStreamer: StationStreamer, options?: RequestInit): Promise<addStreamerResponse> => {
  
  return customFetch<Promise<addStreamerResponse>>(getAddStreamerUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationStreamer,)
  }
);}



/**
 * Retrieve details for a single Streamer/DJ account.
 */
export type getStreamerResponse = {
  data: StationStreamer;
  status: number;
}

export const getGetStreamerUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/streamer/${id}`
}

export const getStreamer = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getStreamerResponse> => {
  
  return customFetch<Promise<getStreamerResponse>>(getGetStreamerUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single Streamer/DJ account.
 */
export type editStreamerResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditStreamerUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/streamer/${id}`
}

export const editStreamer = async (stationId: number | string,
    id: number,
    stationStreamer: StationStreamer, options?: RequestInit): Promise<editStreamerResponse> => {
  
  return customFetch<Promise<editStreamerResponse>>(getEditStreamerUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationStreamer,)
  }
);}



/**
 * Delete a single Streamer/DJ account.
 */
export type deleteStreamerResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteStreamerUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/streamer/${id}`
}

export const deleteStreamer = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteStreamerResponse> => {
  
  return customFetch<Promise<deleteStreamerResponse>>(getDeleteStreamerUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * List all current web hooks.
 */
export type getWebhooksResponse = {
  data: StationWebhook[];
  status: number;
}

export const getGetWebhooksUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/webhooks`
}

export const getWebhooks = async (stationId: number | string, options?: RequestInit): Promise<getWebhooksResponse> => {
  
  return customFetch<Promise<getWebhooksResponse>>(getGetWebhooksUrl(stationId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Create a new web hook.
 */
export type addWebhookResponse = {
  data: StationWebhook;
  status: number;
}

export const getAddWebhookUrl = (stationId: number | string,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/webhooks`
}

export const addWebhook = async (stationId: number | string,
    stationWebhook: StationWebhook, options?: RequestInit): Promise<addWebhookResponse> => {
  
  return customFetch<Promise<addWebhookResponse>>(getAddWebhookUrl(stationId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationWebhook,)
  }
);}



/**
 * Retrieve details for a single web hook.
 */
export type getWebhookResponse = {
  data: StationWebhook;
  status: number;
}

export const getGetWebhookUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/webhook/${id}`
}

export const getWebhook = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<getWebhookResponse> => {
  
  return customFetch<Promise<getWebhookResponse>>(getGetWebhookUrl(stationId,id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * Update details of a single web hook.
 */
export type editWebhookResponse = {
  data: SuccessResponse;
  status: number;
}

export const getEditWebhookUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/webhook/${id}`
}

export const editWebhook = async (stationId: number | string,
    id: number,
    stationWebhook: StationWebhook, options?: RequestInit): Promise<editWebhookResponse> => {
  
  return customFetch<Promise<editWebhookResponse>>(getEditWebhookUrl(stationId,id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(
      stationWebhook,)
  }
);}



/**
 * Delete a single web hook relay.
 */
export type deleteWebhookResponse = {
  data: SuccessResponse;
  status: number;
}

export const getDeleteWebhookUrl = (stationId: number | string,
    id: number,) => {


  return `https://stream.breathfm.de/api/station/${stationId}/webhook/${id}`
}

export const deleteWebhook = async (stationId: number | string,
    id: number, options?: RequestInit): Promise<deleteWebhookResponse> => {
  
  return customFetch<Promise<deleteWebhookResponse>>(getDeleteWebhookUrl(stationId,id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



